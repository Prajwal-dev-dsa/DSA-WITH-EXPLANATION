class Solution
{
    public:
    void quickSort(int arr[], int low, int high)
    {
        if(low<high){
        int pivot=partition(arr,low,high);
        
        quickSort(arr,low,pivot-1);
        quickSort(arr,pivot+1,high);
        }
        
    }
    
    public:
    int partition (int arr[], int low, int high)
    {
       int pivot=arr[low];
       
       int i=low;
       int j=high;
       
       while(i<j){
           while(arr[i]<=pivot && i<=high-1){
               i++;
           }
            while(arr[j]>pivot && j>=low+1){
               j--;
           }
           
           if(i<j){
               swap(arr[i],arr[j]);
           }
       }
       swap(arr[j],arr[low]);
       return j;
    }
};




//--------------------------------------------------------------------------OR----------------------------------------------------------------------




#include <bits/stdc++.h>

int findPivot(vector<int> &arr, int low, int high){
    int pivot=arr[low];
    int i=low;
    int j=high;

    while(i<j){
        while(arr[i]<=pivot && i<=high-1){
            i++;
        }
        while(arr[j]>pivot && j>=low+1){
            j--;
        }
        if(i<j){
            swap(arr[i],arr[j]);
        }
    }
    swap(arr[j],arr[low]);

    return j;
}

void qs(vector<int> &arr, int low, int high){
    if (low < high) {

        int pIndex = findPivot(arr, low, high);
        qs(arr, low, pIndex - 1);
        qs(arr, pIndex + 1, high);
    }
}
vector<int> quickSort(vector<int> arr)
{
    qs(arr,0,arr.size()-1);
    return arr;
}




//----------------------------------------------------------------------JAVA---------------------------------------------------------------------------




class Solution
{
    static void quickSort(int arr[], int low, int high)
    {
        if(low<high){
        int pivot=partition(arr,low,high);
        
        quickSort(arr,low,pivot-1);
        quickSort(arr,pivot+1,high);
        }
    }
    static int partition(int arr[], int low, int high)
    {
       int pivot=arr[low];
       
       int i=low;
       int j=high;
       
       while(i<j){
           while(arr[i]<=pivot && i<=high-1){
               i++;
           }
            while(arr[j]>pivot && j>=low+1){
               j--;
           }
           if(i<j){
               int temp=arr[i];
               arr[i]=arr[j];
               arr[j]=temp;
           }
       }
       int temp=arr[j];
       arr[j]=arr[low];
       arr[low]=temp;
       return j;
    } 
}
